// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NorthstarET.Lms.Tests.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BulkStudentRolloverFeature : object, Xunit.IClassFixture<BulkStudentRolloverFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Bulk Student Rollover", ("    As a DistrictAdmin\n    I want to perform bulk student rollovers between schoo" +
                "l years\n    So that students advance grades efficiently with proper data integri" +
                "ty"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BulkRollover.feature"
#line hidden
        
        public BulkStudentRolloverFeature(BulkStudentRolloverFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am authenticated as a DistrictAdmin for \"oakland-unified\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("school year \"2023-2024\" is archived", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
    await testRunner.AndAsync("school year \"2024-2025\" is active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                        "Student Number",
                        "First Name",
                        "Last Name",
                        "Current Grade"});
            table5.AddRow(new string[] {
                        "STU-2024-001",
                        "John",
                        "Smith",
                        "5"});
            table5.AddRow(new string[] {
                        "STU-2024-002",
                        "Mary",
                        "Johnson",
                        "5"});
            table5.AddRow(new string[] {
                        "STU-2024-003",
                        "David",
                        "Brown",
                        "8"});
            table5.AddRow(new string[] {
                        "STU-2024-004",
                        "Sarah",
                        "Davis",
                        "12"});
#line 10
    await testRunner.AndAsync("the following students exist in \"2023-2024\":", ((string)(null)), table5, "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Preview bulk rollover operation")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Preview bulk rollover operation")]
        public async System.Threading.Tasks.Task PreviewBulkRolloverOperation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Preview bulk rollover operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 18
    await testRunner.WhenAsync("I request a rollover preview for Grade 5 students to Grade 6", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Student Number",
                            "Current Grade",
                            "Target Grade",
                            "Action"});
                table6.AddRow(new string[] {
                            "STU-2024-001",
                            "5",
                            "6",
                            "Promote"});
                table6.AddRow(new string[] {
                            "STU-2024-002",
                            "5",
                            "6",
                            "Promote"});
#line 19
    await testRunner.ThenAsync("the preview should show:", ((string)(null)), table6, "Then ");
#line hidden
#line 23
    await testRunner.AndAsync("no actual data changes should occur", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.AndAsync("the preview should include impact summary", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync("a BulkRolloverPreviewEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Execute bulk rollover with all-or-nothing error handling")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Execute bulk rollover with all-or-nothing error handling")]
        public async System.Threading.Tasks.Task ExecuteBulkRolloverWithAll_Or_NothingErrorHandling()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Execute bulk rollover with all-or-nothing error handling", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 28
    await testRunner.GivenAsync("I have reviewed the rollover preview", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.WhenAsync("I execute the bulk rollover with \"all-or-nothing\" error handling", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
    await testRunner.AndAsync("all validations pass", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.ThenAsync("all Grade 5 students should be promoted to Grade 6 in the new school year", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
    await testRunner.AndAsync("enrollments should be created for the new school year", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.AndAsync("the previous year enrollments should remain unchanged", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.AndAsync("a BulkRolloverCompletedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.AndAsync("all operations should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Execute bulk rollover with best-effort error handling")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Execute bulk rollover with best-effort error handling")]
        public async System.Threading.Tasks.Task ExecuteBulkRolloverWithBest_EffortErrorHandling()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Execute bulk rollover with best-effort error handling", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Student Number",
                            "Issue"});
                table7.AddRow(new string[] {
                            "STU-2024-003",
                            "Missing required documents"});
#line 38
    await testRunner.GivenAsync("the rollover includes students with validation issues:", ((string)(null)), table7, "Given ");
#line hidden
#line 41
    await testRunner.WhenAsync("I execute the bulk rollover with \"best-effort\" error handling", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync("valid students should be promoted successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
    await testRunner.AndAsync("invalid students should be skipped with error records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.AndAsync("the operation should complete with partial success", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.AndAsync("a detailed error report should be generated", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Execute bulk rollover with threshold error handling")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Execute bulk rollover with threshold error handling")]
        public async System.Threading.Tasks.Task ExecuteBulkRolloverWithThresholdErrorHandling()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Execute bulk rollover with threshold error handling", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 48
    await testRunner.GivenAsync("I set the failure threshold to 10%", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I execute the bulk rollover and 15% of students fail validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("the entire operation should be rolled back", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync("no students should be promoted", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.AndAsync("a BulkRolloverFailedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
    await testRunner.AndAsync("the failure should be audited with threshold exceeded reason", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle graduating students in rollover")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Handle graduating students in rollover")]
        public async System.Threading.Tasks.Task HandleGraduatingStudentsInRollover()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle graduating students in rollover", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 56
    await testRunner.WhenAsync("I execute a rollover that includes Grade 12 students", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
    await testRunner.ThenAsync("Grade 12 students should be marked as \"Graduated\" instead of promoted", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
    await testRunner.AndAsync("their final transcripts should be flagged for processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.AndAsync("they should not receive enrollments in the new school year", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
    await testRunner.AndAsync("graduation records should be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor bulk rollover progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Monitor bulk rollover progress")]
        public async System.Threading.Tasks.Task MonitorBulkRolloverProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Monitor bulk rollover progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 63
    await testRunner.GivenAsync("a bulk rollover operation is in progress", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
    await testRunner.WhenAsync("I check the operation status", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "Status",
                            "Running"});
                table8.AddRow(new string[] {
                            "Progress",
                            "45%"});
                table8.AddRow(new string[] {
                            "Success Count",
                            "450"});
                table8.AddRow(new string[] {
                            "Failure Count",
                            "5"});
                table8.AddRow(new string[] {
                            "Estimated Time",
                            "2 minutes"});
#line 65
    await testRunner.ThenAsync("I should see:", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancel running bulk rollover")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Cancel running bulk rollover")]
        public async System.Threading.Tasks.Task CancelRunningBulkRollover()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Cancel running bulk rollover", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 74
    await testRunner.GivenAsync("a bulk rollover operation is in progress", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 75
    await testRunner.WhenAsync("I cancel the operation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
    await testRunner.ThenAsync("the operation should stop processing new records", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
    await testRunner.AndAsync("completed promotions should remain in place", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
    await testRunner.AndAsync("a BulkRolloverCancelledEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
    await testRunner.AndAsync("the cancellation should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retry failed bulk rollover")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Student Rollover")]
        [Xunit.TraitAttribute("Description", "Retry failed bulk rollover")]
        public async System.Threading.Tasks.Task RetryFailedBulkRollover()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Retry failed bulk rollover", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 82
    await testRunner.GivenAsync("a bulk rollover operation failed due to system error", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 83
    await testRunner.WhenAsync("I retry the operation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
    await testRunner.ThenAsync("only the failed records should be reprocessed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 85
    await testRunner.AndAsync("previously successful records should be skipped", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
    await testRunner.AndAsync("the retry should be tracked as a continuation of the original operation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await BulkStudentRolloverFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await BulkStudentRolloverFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
