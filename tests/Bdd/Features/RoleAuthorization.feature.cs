// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NorthstarET.Lms.Tests.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CompositeRoleAuthorizationFeature : object, Xunit.IClassFixture<CompositeRoleAuthorizationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Composite Role Authorization", ("    As a DistrictAdmin\n    I want to assign and manage complex role hierarchies\n " +
                "   So that users have appropriate access based on their responsibilities"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RoleAuthorization.feature"
#line hidden
        
        public CompositeRoleAuthorizationFeature(CompositeRoleAuthorizationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am authenticated as a DistrictAdmin for \"oakland-unified\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
            global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                        "Role Name",
                        "Permissions",
                        "Scopes"});
            table13.AddRow(new string[] {
                        "Teacher",
                        "ViewStudents, EditGrades",
                        "Class"});
            table13.AddRow(new string[] {
                        "Principal",
                        "ViewStaff, ManageClasses, ViewReports",
                        "School"});
            table13.AddRow(new string[] {
                        "DistrictAdmin",
                        "ManageUsers, ViewAllData, SystemConfig",
                        "District"});
            table13.AddRow(new string[] {
                        "SubstituteTeacher",
                        "ViewStudents",
                        "Class"});
#line 8
    await testRunner.AndAsync("the following role definitions exist:", ((string)(null)), table13, "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assign single role to user")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Assign single role to user")]
        public async System.Threading.Tasks.Task AssignSingleRoleToUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Assign single role to user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 16
    await testRunner.GivenAsync("a staff member \"john.teacher@oaklandschools.org\" exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
    await testRunner.AndAsync("a class \"Math 101\" exists at \"Lincoln Elementary\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.WhenAsync("I assign the \"Teacher\" role to the user for class \"Math 101\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("the user should have \"ViewStudents\" and \"EditGrades\" permissions for that class", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
    await testRunner.AndAsync("the role assignment should be active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("a RoleAssignedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.AndAsync("the assignment should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assign multiple roles to user across different scopes")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Assign multiple roles to user across different scopes")]
        public async System.Threading.Tasks.Task AssignMultipleRolesToUserAcrossDifferentScopes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Assign multiple roles to user across different scopes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 25
    await testRunner.GivenAsync("a staff member \"mary.principal@oaklandschools.org\" exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
    await testRunner.AndAsync("schools \"Lincoln Elementary\" and \"Roosevelt High\" exist", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Role Name",
                            "Scope"});
                table14.AddRow(new string[] {
                            "Principal",
                            "Lincoln Elementary"});
                table14.AddRow(new string[] {
                            "Teacher",
                            "Roosevelt High - Science 201"});
#line 27
    await testRunner.WhenAsync("I assign the following roles:", ((string)(null)), table14, "When ");
#line hidden
#line 31
    await testRunner.ThenAsync("the user should have principal permissions at Lincoln Elementary", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
    await testRunner.AndAsync("the user should have teacher permissions for Science 201 at Roosevelt High", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.AndAsync("the roles should not interfere with each other", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delegate role assignment with expiration")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Delegate role assignment with expiration")]
        public async System.Threading.Tasks.Task DelegateRoleAssignmentWithExpiration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delegate role assignment with expiration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 36
    await testRunner.GivenAsync("a principal \"mary.principal@oaklandschools.org\" has delegation permissions", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
    await testRunner.AndAsync("a staff member \"john.teacher@oaklandschools.org\" exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.WhenAsync(("the principal delegates \"SubstituteTeacher\" role to the user for class \"Math 101\"" +
                        " expiring in 30 days"), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
    await testRunner.ThenAsync("the delegated role should be active immediately", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
    await testRunner.AndAsync("the delegation should expire automatically after 30 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
    await testRunner.AndAsync("a RoleDelegatedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Automatic role expiration cleanup")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Automatic role expiration cleanup")]
        public async System.Threading.Tasks.Task AutomaticRoleExpirationCleanup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Automatic role expiration cleanup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 44
    await testRunner.GivenAsync("a delegated role assignment expires today", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
    await testRunner.WhenAsync("the role expiration cleanup job runs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("the expired role assignment should be marked as \"Expired\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("the user should lose the associated permissions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("a RoleExpiredEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("the expiration should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hierarchical permission inheritance")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Hierarchical permission inheritance")]
        public async System.Threading.Tasks.Task HierarchicalPermissionInheritance()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Hierarchical permission inheritance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 52
    await testRunner.GivenAsync("a user has \"DistrictAdmin\" role at district level", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.WhenAsync("I check their permissions for any school or class in the district", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("they should inherit all district-level permissions", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
    await testRunner.AndAsync("the permission check should succeed for all scopes within the district", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Role conflict detection")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Role conflict detection")]
        public async System.Threading.Tasks.Task RoleConflictDetection()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Role conflict detection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 58
    await testRunner.GivenAsync("a user has \"Teacher\" role for \"Math 101\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
    await testRunner.WhenAsync("I attempt to assign \"Principal\" role for the same class", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
    await testRunner.ThenAsync(("the assignment should be rejected with error \"Role conflict: Cannot be both teach" +
                        "er and principal for same class\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("no new role assignment should be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk role assignment with validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Bulk role assignment with validation")]
        public async System.Threading.Tasks.Task BulkRoleAssignmentWithValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Bulk role assignment with validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "User Email",
                            "Role Name",
                            "Scope"});
                table15.AddRow(new string[] {
                            "teacher1@school.org",
                            "Teacher",
                            "Math 101"});
                table15.AddRow(new string[] {
                            "teacher2@school.org",
                            "Teacher",
                            "Science 201"});
                table15.AddRow(new string[] {
                            "invalid@email",
                            "Teacher",
                            "Math 101"});
                table15.AddRow(new string[] {
                            "principal@school.org",
                            "Invalid",
                            "Math 101"});
#line 64
    await testRunner.WhenAsync("I perform a bulk role assignment operation:", ((string)(null)), table15, "When ");
#line hidden
#line 70
    await testRunner.ThenAsync("2 role assignments should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 71
    await testRunner.AndAsync("2 role assignments should fail with validation errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.AndAsync("a bulk operation report should be generated", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
    await testRunner.AndAsync("all operations should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Revoke role assignment")]
        [Xunit.TraitAttribute("FeatureTitle", "Composite Role Authorization")]
        [Xunit.TraitAttribute("Description", "Revoke role assignment")]
        public async System.Threading.Tasks.Task RevokeRoleAssignment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Revoke role assignment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 76
    await testRunner.GivenAsync("a user has an active \"Teacher\" role for \"Math 101\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 77
    await testRunner.WhenAsync("I revoke the role assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
    await testRunner.ThenAsync("the role assignment should be marked as \"Revoked\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 79
    await testRunner.AndAsync("the user should lose all permissions for that class", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
    await testRunner.AndAsync("a RoleRevokedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
    await testRunner.AndAsync("the revocation should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CompositeRoleAuthorizationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CompositeRoleAuthorizationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
