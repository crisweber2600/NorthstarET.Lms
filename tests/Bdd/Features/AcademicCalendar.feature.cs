// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NorthstarET.Lms.Tests.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AcademicCalendarValidationFeature : object, Xunit.IClassFixture<AcademicCalendarValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Academic Calendar Validation", ("    As a DistrictAdmin\n    I want to define and validate academic calendars\n    S" +
                "o that school years have proper term and closure definitions"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AcademicCalendar.feature"
#line hidden
        
        public AcademicCalendarValidationFeature(AcademicCalendarValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am authenticated as a DistrictAdmin for \"oakland-unified\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("a school year \"2024-2025\" exists with dates from \"2024-08-15\" to \"2025-06-15\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create academic calendar with valid terms")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Create academic calendar with valid terms")]
        public async System.Threading.Tasks.Task CreateAcademicCalendarWithValidTerms()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create academic calendar with valid terms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Term Name",
                            "Start Date",
                            "End Date"});
                table1.AddRow(new string[] {
                            "Fall Semester",
                            "2024-08-15",
                            "2024-12-20"});
                table1.AddRow(new string[] {
                            "Spring Semester",
                            "2025-01-08",
                            "2025-06-15"});
#line 11
    await testRunner.WhenAsync("I create an academic calendar for the school year with terms:", ((string)(null)), table1, "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("the academic calendar should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("the terms should not overlap", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("all terms should be within the school year dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("an AcademicCalendarCreatedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reject overlapping terms")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Reject overlapping terms")]
        public async System.Threading.Tasks.Task RejectOverlappingTerms()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reject overlapping terms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Term Name",
                            "Start Date",
                            "End Date"});
                table2.AddRow(new string[] {
                            "Fall Semester",
                            "2024-08-15",
                            "2024-12-20"});
                table2.AddRow(new string[] {
                            "Winter Session",
                            "2024-12-15",
                            "2025-01-15"});
                table2.AddRow(new string[] {
                            "Spring Semester",
                            "2025-01-08",
                            "2025-06-15"});
#line 21
    await testRunner.WhenAsync("I attempt to create an academic calendar with overlapping terms:", ((string)(null)), table2, "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("the calendar creation should fail with error \"Terms cannot overlap\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
    await testRunner.AndAsync("no academic calendar should be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reject terms outside school year")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Reject terms outside school year")]
        public async System.Threading.Tasks.Task RejectTermsOutsideSchoolYear()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reject terms outside school year", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Term Name",
                            "Start Date",
                            "End Date"});
                table3.AddRow(new string[] {
                            "Summer Prep",
                            "2024-07-01",
                            "2024-08-10"});
                table3.AddRow(new string[] {
                            "Fall Semester",
                            "2024-08-15",
                            "2024-12-20"});
#line 30
    await testRunner.WhenAsync("I attempt to create an academic calendar with terms:", ((string)(null)), table3, "When ");
#line hidden
#line 34
    await testRunner.ThenAsync(("the calendar creation should fail with error \"All terms must be within school yea" +
                        "r dates\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("no academic calendar should be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add school closures to calendar")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Add school closures to calendar")]
        public async System.Threading.Tasks.Task AddSchoolClosuresToCalendar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add school closures to calendar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 38
    await testRunner.GivenAsync("an academic calendar exists for the school year", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Closure Name",
                            "Start Date",
                            "End Date",
                            "Reason"});
                table4.AddRow(new string[] {
                            "Thanksgiving Break",
                            "2024-11-25",
                            "2024-11-29",
                            "Holiday"});
                table4.AddRow(new string[] {
                            "Winter Break",
                            "2024-12-21",
                            "2025-01-07",
                            "Holiday"});
                table4.AddRow(new string[] {
                            "Spring Break",
                            "2025-03-24",
                            "2025-03-28",
                            "Holiday"});
#line 39
    await testRunner.WhenAsync("I add school closures:", ((string)(null)), table4, "When ");
#line hidden
#line 44
    await testRunner.ThenAsync("the closures should be added to the calendar", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 45
    await testRunner.AndAsync("the closures should override instructional days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
    await testRunner.AndAsync("a CalendarClosuresAddedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate instructional days excluding closures")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Calculate instructional days excluding closures")]
        public async System.Threading.Tasks.Task CalculateInstructionalDaysExcludingClosures()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculate instructional days excluding closures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 49
    await testRunner.GivenAsync("an academic calendar exists with terms and closures", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
    await testRunner.WhenAsync("I request the instructional days count for \"Fall Semester\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
    await testRunner.ThenAsync("the count should exclude weekends and closure days", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 52
    await testRunner.AndAsync("the calculation should be accurate for attendance reporting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate calendar completeness before school year activation")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Validate calendar completeness before school year activation")]
        public async System.Threading.Tasks.Task ValidateCalendarCompletenessBeforeSchoolYearActivation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate calendar completeness before school year activation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 55
    await testRunner.GivenAsync("a school year \"2024-2025\" is in \"Draft\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
    await testRunner.AndAsync("an incomplete academic calendar exists (missing spring term)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.WhenAsync("I attempt to activate the school year", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
    await testRunner.ThenAsync("the activation should fail with error \"Academic calendar must be complete\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 59
    await testRunner.AndAsync("the school year should remain in \"Draft\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Archive calendar when school year is archived")]
        [Xunit.TraitAttribute("FeatureTitle", "Academic Calendar Validation")]
        [Xunit.TraitAttribute("Description", "Archive calendar when school year is archived")]
        public async System.Threading.Tasks.Task ArchiveCalendarWhenSchoolYearIsArchived()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Archive calendar when school year is archived", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 62
    await testRunner.GivenAsync("a school year \"2023-2024\" with a complete academic calendar", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
    await testRunner.WhenAsync("the school year is archived", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
    await testRunner.ThenAsync("the academic calendar should be marked as archived", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 65
    await testRunner.AndAsync("no modifications should be allowed to the archived calendar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.AndAsync("an AcademicCalendarArchivedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AcademicCalendarValidationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AcademicCalendarValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
