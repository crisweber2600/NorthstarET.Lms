// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NorthstarET.Lms.Tests.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LegalHoldRetentionFeature : object, Xunit.IClassFixture<LegalHoldRetentionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Legal Hold Retention", ("    As a DistrictAdmin or ComplianceOfficer\n    I want to apply legal holds to pr" +
                "event data deletion\n    So that records are preserved during legal proceedings o" +
                "r investigations"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "LegalHoldRetention.feature"
#line hidden
        
        public LegalHoldRetentionFeature(LegalHoldRetentionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am authenticated as a DistrictAdmin for \"oakland-unified\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
            global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                        "Entity Type",
                        "Retention Years",
                        "Grace Period Days"});
            table10.AddRow(new string[] {
                        "Student",
                        "7",
                        "90"});
            table10.AddRow(new string[] {
                        "Staff",
                        "5",
                        "60"});
            table10.AddRow(new string[] {
                        "Assessment",
                        "3",
                        "30"});
#line 8
    await testRunner.AndAsync("the following retention policies are active:", ((string)(null)), table10, "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Apply legal hold to student record")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Apply legal hold to student record")]
        public async System.Threading.Tasks.Task ApplyLegalHoldToStudentRecord()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply legal hold to student record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 15
    await testRunner.GivenAsync("a student \"STU-2024-001\" exists with graduation date \"2018-06-15\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.AndAsync("the student record is eligible for retention purge", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.WhenAsync("I apply a legal hold with reason \"Title IX Investigation Case #2024-001\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.ThenAsync("the legal hold should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
    await testRunner.AndAsync("the student record should be protected from deletion", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("a LegalHoldAppliedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("the hold application should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Legal hold prevents automatic retention purge")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Legal hold prevents automatic retention purge")]
        public async System.Threading.Tasks.Task LegalHoldPreventsAutomaticRetentionPurge()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Legal hold prevents automatic retention purge", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 24
    await testRunner.GivenAsync("a student record has an active legal hold", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.WhenAsync("the retention purge job runs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("the student record should be skipped from purge", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
    await testRunner.AndAsync("the skip should be logged with legal hold reference", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("a RetentionPurgeSkippedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("the purge job should continue with other eligible records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Release legal hold when case concludes")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Release legal hold when case concludes")]
        public async System.Threading.Tasks.Task ReleaseLegalHoldWhenCaseConcludes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Release legal hold when case concludes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.GivenAsync("a student record has an active legal hold", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("I release the legal hold with reason \"Investigation concluded - no findings\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("the legal hold should be marked as \"Released\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("the student record should become eligible for retention processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("a LegalHoldReleasedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("the release should be audited", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk apply legal holds for class action case")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Bulk apply legal holds for class action case")]
        public async System.Threading.Tasks.Task BulkApplyLegalHoldsForClassActionCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Bulk apply legal holds for class action case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Student Number",
                            "Name",
                            "Graduation Year"});
                table11.AddRow(new string[] {
                            "STU-2024-001",
                            "John Smith",
                            "2018"});
                table11.AddRow(new string[] {
                            "STU-2024-002",
                            "Mary Johnson",
                            "2019"});
                table11.AddRow(new string[] {
                            "STU-2024-003",
                            "David Brown",
                            "2020"});
#line 40
    await testRunner.GivenAsync("multiple student records exist for a class action lawsuit:", ((string)(null)), table11, "Given ");
#line hidden
#line 45
    await testRunner.WhenAsync("I apply bulk legal holds with reason \"Class Action Lawsuit ABC vs District\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("all specified records should have legal holds applied", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("the holds should share the same case reference number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("a BulkLegalHoldAppliedEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Legal hold extends beyond normal retention period")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Legal hold extends beyond normal retention period")]
        public async System.Threading.Tasks.Task LegalHoldExtendsBeyondNormalRetentionPeriod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Legal hold extends beyond normal retention period", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 51
    await testRunner.GivenAsync("a student record has been under legal hold for 10 years", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
    await testRunner.AndAsync("the normal retention period is 7 years", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
    await testRunner.WhenAsync("I check the record\'s retention status", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("the record should still be protected by the legal hold", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
    await testRunner.AndAsync("the extended retention should be justified by the hold", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync("compliance reports should reflect the legal hold extension", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Automatic legal hold expiration")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Automatic legal hold expiration")]
        public async System.Threading.Tasks.Task AutomaticLegalHoldExpiration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Automatic legal hold expiration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 59
    await testRunner.GivenAsync("a legal hold was applied with expiration date \"2024-12-31\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
    await testRunner.WhenAsync("the current date exceeds the expiration date", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
    await testRunner.AndAsync("the automatic cleanup job runs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
    await testRunner.ThenAsync("the legal hold should be automatically released", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
    await testRunner.AndAsync("the record should become eligible for normal retention processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
    await testRunner.AndAsync("a LegalHoldExpiredEvent should be raised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Legal hold audit trail immutability")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Legal hold audit trail immutability")]
        public async System.Threading.Tasks.Task LegalHoldAuditTrailImmutability()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Legal hold audit trail immutability", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 67
    await testRunner.GivenAsync("a legal hold exists on a student record", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
    await testRunner.WhenAsync("I attempt to modify the hold creation timestamp", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
    await testRunner.ThenAsync("the modification should be rejected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
    await testRunner.AndAsync("the original audit record should remain unchanged", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync("an attempted tampering event should be logged", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compliance report includes legal hold data")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Compliance report includes legal hold data")]
        public async System.Threading.Tasks.Task ComplianceReportIncludesLegalHoldData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Compliance report includes legal hold data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 74
    await testRunner.GivenAsync("multiple records have active legal holds", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 75
    await testRunner.WhenAsync("I generate a compliance report for data retention", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Description"});
                table12.AddRow(new string[] {
                            "Total Records on Hold",
                            "Count of records with active legal holds"});
                table12.AddRow(new string[] {
                            "Oldest Hold Date",
                            "Date of the oldest active legal hold"});
                table12.AddRow(new string[] {
                            "Hold Reasons",
                            "Summary of hold reasons by category"});
                table12.AddRow(new string[] {
                            "Extended Retention Count",
                            "Records held beyond normal retention period"});
#line 76
    await testRunner.ThenAsync("the report should include:", ((string)(null)), table12, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Legal hold prevents data export restriction")]
        [Xunit.TraitAttribute("FeatureTitle", "Legal Hold Retention")]
        [Xunit.TraitAttribute("Description", "Legal hold prevents data export restriction")]
        public async System.Threading.Tasks.Task LegalHoldPreventsDataExportRestriction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Legal hold prevents data export restriction", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 84
    await testRunner.GivenAsync("a student record has an active legal hold", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 85
    await testRunner.WhenAsync("an automated system attempts to restrict data export due to retention expiry", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
    await testRunner.ThenAsync("the restriction should be blocked", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 87
    await testRunner.AndAsync("the legal hold should take precedence", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
    await testRunner.AndAsync("the system should log the precedence decision", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await LegalHoldRetentionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await LegalHoldRetentionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
