<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NorthstarET.Lms.Domain</name>
    </assembly>
    <members>
        <member name="M:NorthstarET.Lms.Domain.Services.ITenantIsolationService.ValidateTenantAccessAsync(System.String,System.String)">
            <summary>
            Validates that the current user context is authorized to access the specified tenant
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ITenantIsolationService.ApplyTenantFilter``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Ensures all data queries are properly scoped to the current tenant
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ITenantIsolationService.ValidateEntityTenantScopeAsync``1(``0,System.String)">
            <summary>
            Validates that an entity belongs to the correct tenant before operations
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRoleAuthorizationService.HasPermissionAsync(System.Guid,System.String,System.String)">
            <summary>
            Evaluates whether a user has the required permission for a specific operation
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRoleAuthorizationService.GetEffectivePermissionsAsync(System.Guid)">
            <summary>
            Gets all effective permissions for a user across all their roles
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRoleAuthorizationService.ValidateRoleScopeAsync(NorthstarET.Lms.Domain.Entities.RoleAssignment)">
            <summary>
            Validates role assignments against scope constraints (School, Class, SchoolYear)
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRoleAuthorizationService.EvaluateCompositeAuthorizationAsync(System.Guid,System.String,System.Object)">
            <summary>
            Evaluates composite authorization when user has multiple roles
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRoleAuthorizationService.CanDelegateRoleAsync(System.Guid,System.Guid,System.Guid)">
            <summary>
            Checks if a user can delegate their role to another user
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IAuditChainService.GenerateAuditHash(NorthstarET.Lms.Domain.Entities.AuditRecord,System.String)">
            <summary>
            Generates a tamper-evident hash for the audit record
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IAuditChainService.ValidateAuditChainAsync(System.Collections.Generic.IEnumerable{NorthstarET.Lms.Domain.Entities.AuditRecord})">
            <summary>
            Validates the integrity of an audit chain
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IAuditChainService.DetectTamperingAsync(System.Collections.Generic.IEnumerable{NorthstarET.Lms.Domain.Entities.AuditRecord})">
            <summary>
            Detects any tampering in the audit chain
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IAuditChainService.GetPreviousAuditHashAsync(System.String,System.DateTime)">
            <summary>
            Gets the previous audit record hash for chaining
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRetentionPolicyService.GetEffectiveRetentionPolicyAsync(System.String,System.String)">
            <summary>
            Gets the effective retention policy for an entity type
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRetentionPolicyService.IsEligibleForPurgeAsync``1(``0)">
            <summary>
            Determines if an entity is eligible for purging based on retention policies
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRetentionPolicyService.CalculatePurgeDateAsync``1(``0)">
            <summary>
            Calculates the purge date for an entity
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.IRetentionPolicyService.HasActiveLegalHoldAsync``1(``0)">
            <summary>
            Checks if an entity has any active legal holds preventing purge
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ISecurityMonitoringService.LogSecurityEventAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Logs a security event for monitoring
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ISecurityMonitoringService.DetectAccessAnomaliesAsync(System.String,System.TimeSpan)">
            <summary>
            Detects anomalous access patterns
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ISecurityMonitoringService.ShouldTriggerSecurityAlertAsync(System.String,System.String,System.Int32)">
            <summary>
            Validates repeated authorization failures and triggers alerts
            </summary>
        </member>
        <member name="M:NorthstarET.Lms.Domain.Services.ISecurityMonitoringService.GenerateSecurityAlertAsync(NorthstarET.Lms.Domain.Services.SecurityAlert)">
            <summary>
            Generates multi-tier security alerts based on severity
            </summary>
        </member>
    </members>
</doc>
